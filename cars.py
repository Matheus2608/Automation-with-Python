#!/usr/bin/env python3

import emails
import reports
import json
import locale
import sys
import operator
import os
# import os.path


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.
    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    best_car = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = float(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # TODO: also handle max sales
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales = item
        # TODO: also handle most popular car_year
        if not item["car"]["car_year"] in best_car.keys():
            best_car[item["car"]["car_year"]] = item["total_sales"]
        else:
            best_car[item["car"]["car_year"]] += item["total_sales"]

        all_values = best_car.values()
        max_value = max(all_values)
        max_key = max(best_car, key=best_car.get)

    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            format_car(max_sales["car"]), max_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(
            max_key, max_value)
    ]

    return summary
    """
  Expected:
  [['The Mercedes-Benz E-Class (2009) generated the most revenue: $22749529.02', 
  'The Acura Integra (1995) had the most sales: 1192', 
  'The most popular year was 2007 with 21534 sales.']]
  """


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(
            item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    # data = load_data(os.path.expanduser('~') + "/car_sales.json")
    summary = process_data(data)
    summary = '<br/>'.join(summary)
    """
  The PDF should contain:
    * A summary paragraph which contains the most sales/most revenue/most popular year values worked out in the previous step.
    Note: To add line breaks in the PDF, use: <br/> between the lines.
    * A table which contains all the information parsed from the JSON file, organised by id_number. The car details should be combined into one column in the form <car_make> <car_model> (<car_year>).
    Note: You can use the cars_dict_to_table function for the above task.
  """
    # TODO: turn this into a PDF report
    reports.generate("./tmp/cars.pdf", "Cars report", summary, cars_dict_to_table(data))
    # TODO: send the PDF report as an email attachment
    message = emails.generate("matheuslacerdadasilveira@gmail.com", "matheuslacerdadasilveira@gmail.com", "Cars report", 
    "Here it is the report that you ordered, feel free to ask me abou anything about this report.", "./tmp/cars.pdf")
    emails.send(message)
if __name__ == "__main__":
    main(sys.argv)
